package vbs.vvi.com.bs.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBUSER_BEAN".
*/
public class DBUserBeanDao extends AbstractDao<DBUserBean, Long> {

    public static final String TABLENAME = "DBUSER_BEAN";

    /**
     * Properties of entity DBUserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property UserKey = new Property(1, String.class, "userKey", false, "USER_KEY");
        public final static Property Status = new Property(2, int.class, "status", false, "STATUS");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Birthday = new Property(5, long.class, "birthday", false, "BIRTHDAY");
        public final static Property TipSetting = new Property(6, int.class, "tipSetting", false, "TIP_SETTING");
        public final static Property Gender = new Property(7, int.class, "gender", false, "GENDER");
        public final static Property Important = new Property(8, int.class, "important", false, "IMPORTANT");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property CreateTime = new Property(10, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Address = new Property(11, String.class, "address", false, "ADDRESS");
        public final static Property AvatarPath = new Property(12, String.class, "avatarPath", false, "AVATAR_PATH");
        public final static Property Relationship = new Property(13, int.class, "relationship", false, "RELATIONSHIP");
        public final static Property GroupInfo = new Property(14, int.class, "groupInfo", false, "GROUP_INFO");
        public final static Property GroupName = new Property(15, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Year = new Property(16, int.class, "year", false, "YEAR");
        public final static Property Month = new Property(17, int.class, "month", false, "MONTH");
        public final static Property Day = new Property(18, int.class, "day", false, "DAY");
        public final static Property BirthType = new Property(19, int.class, "birthType", false, "BIRTH_TYPE");
    };


    public DBUserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBUserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBUSER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: userId
                "\"USER_KEY\" TEXT," + // 1: userKey
                "\"STATUS\" INTEGER NOT NULL ," + // 2: status
                "\"NAME\" TEXT," + // 3: name
                "\"PHONE\" TEXT," + // 4: phone
                "\"BIRTHDAY\" INTEGER NOT NULL ," + // 5: birthday
                "\"TIP_SETTING\" INTEGER NOT NULL ," + // 6: tipSetting
                "\"GENDER\" INTEGER NOT NULL ," + // 7: gender
                "\"IMPORTANT\" INTEGER NOT NULL ," + // 8: important
                "\"REMARK\" TEXT," + // 9: remark
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 10: createTime
                "\"ADDRESS\" TEXT," + // 11: address
                "\"AVATAR_PATH\" TEXT," + // 12: avatarPath
                "\"RELATIONSHIP\" INTEGER NOT NULL ," + // 13: relationship
                "\"GROUP_INFO\" INTEGER NOT NULL ," + // 14: groupInfo
                "\"GROUP_NAME\" TEXT," + // 15: groupName
                "\"YEAR\" INTEGER NOT NULL ," + // 16: year
                "\"MONTH\" INTEGER NOT NULL ," + // 17: month
                "\"DAY\" INTEGER NOT NULL ," + // 18: day
                "\"BIRTH_TYPE\" INTEGER NOT NULL );"); // 19: birthType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBUSER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBUserBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userKey = entity.getUserKey();
        if (userKey != null) {
            stmt.bindString(2, userKey);
        }
        stmt.bindLong(3, entity.getStatus());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
        stmt.bindLong(6, entity.getBirthday());
        stmt.bindLong(7, entity.getTipSetting());
        stmt.bindLong(8, entity.getGender());
        stmt.bindLong(9, entity.getImportant());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
        stmt.bindLong(11, entity.getCreateTime());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String avatarPath = entity.getAvatarPath();
        if (avatarPath != null) {
            stmt.bindString(13, avatarPath);
        }
        stmt.bindLong(14, entity.getRelationship());
        stmt.bindLong(15, entity.getGroupInfo());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(16, groupName);
        }
        stmt.bindLong(17, entity.getYear());
        stmt.bindLong(18, entity.getMonth());
        stmt.bindLong(19, entity.getDay());
        stmt.bindLong(20, entity.getBirthType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBUserBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userKey = entity.getUserKey();
        if (userKey != null) {
            stmt.bindString(2, userKey);
        }
        stmt.bindLong(3, entity.getStatus());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
        stmt.bindLong(6, entity.getBirthday());
        stmt.bindLong(7, entity.getTipSetting());
        stmt.bindLong(8, entity.getGender());
        stmt.bindLong(9, entity.getImportant());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
        stmt.bindLong(11, entity.getCreateTime());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String avatarPath = entity.getAvatarPath();
        if (avatarPath != null) {
            stmt.bindString(13, avatarPath);
        }
        stmt.bindLong(14, entity.getRelationship());
        stmt.bindLong(15, entity.getGroupInfo());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(16, groupName);
        }
        stmt.bindLong(17, entity.getYear());
        stmt.bindLong(18, entity.getMonth());
        stmt.bindLong(19, entity.getDay());
        stmt.bindLong(20, entity.getBirthType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DBUserBean readEntity(Cursor cursor, int offset) {
        DBUserBean entity = new DBUserBean( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userKey
            cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.getLong(offset + 5), // birthday
            cursor.getInt(offset + 6), // tipSetting
            cursor.getInt(offset + 7), // gender
            cursor.getInt(offset + 8), // important
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.getLong(offset + 10), // createTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // address
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // avatarPath
            cursor.getInt(offset + 13), // relationship
            cursor.getInt(offset + 14), // groupInfo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // groupName
            cursor.getInt(offset + 16), // year
            cursor.getInt(offset + 17), // month
            cursor.getInt(offset + 18), // day
            cursor.getInt(offset + 19) // birthType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBUserBean entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setUserKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthday(cursor.getLong(offset + 5));
        entity.setTipSetting(cursor.getInt(offset + 6));
        entity.setGender(cursor.getInt(offset + 7));
        entity.setImportant(cursor.getInt(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTime(cursor.getLong(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAvatarPath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRelationship(cursor.getInt(offset + 13));
        entity.setGroupInfo(cursor.getInt(offset + 14));
        entity.setGroupName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setYear(cursor.getInt(offset + 16));
        entity.setMonth(cursor.getInt(offset + 17));
        entity.setDay(cursor.getInt(offset + 18));
        entity.setBirthType(cursor.getInt(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBUserBean entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBUserBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
